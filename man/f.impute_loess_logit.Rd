% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute.R
\name{f.impute_loess_logit}
\alias{f.impute_loess_logit}
\title{Impute by drawing from `p(missing|intensity)` estimated with loess.}
\usage{
f.impute_loess_logit(
  state,
  config,
  span. = NULL,
  gran = NULL,
  off = 1,
  f_mid = stats::median,
  degree = 1,
  fam = "symmetric"
)
}
\arguments{
\item{state}{A list with elements like that returned by \code{f.read_data()}:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  } 
It is assumed that state$expression has been previously `log2(x+1)` transformed.}

\item{config}{List with configuration values. Uses the following keys:
\tabular{ll}{
  \code{log_file}            \cr \tab Path to log file (character); \code{log_file=""} outputs to console.
  \code{impute_granularity}  \cr \tab Numeric greater than zero. Determines granularity of imputation. Smaller values lead to finer grain.
  \code{impute_span}         \cr \tab Span (numeric between zero and 1) for \code{loess} fit.
}}

\item{span.}{Span for loess fit. Numeric in the open interval \code{(0, 1)}.}

\item{gran}{Numeric greater than zero. Granularity of prediction 
grid. Smaller values lead to less chance of duplicate imputed values.
Larger values require more compute time and memory.}

\item{off}{Numeric offset for calculating 
\code{p.missing = (n.missing + off) / (n.total + off)}.}

\item{f_mid}{Function to use for calculating central tendency of 
feature expression across samples.}

\item{degree}{Numeric in set \code{c(1, 2)}. Degree for loess fit.}

\item{fam}{Character in set \code{c("symmetric", "gaussian")}. Family 
for \code{loess} fit.}
}
\value{
An updated \code{state} list with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
Impute missing values by randomly drawing from an estimated density 
    of \code{p(missing|intensity)}.
}
\details{
Impute random draws by drawing from the estimated density of 
  \code{p(missing|intensity)}. Estimates \code{p(missing|intensity)} using 
  a loess fit with form \code{log(p_missing/p_found) ~ intensity}, where 
  intensity is assumed to be previously log transformed. If you want 
  \code{0} to be considered missing, and have \code{0} in the data, do 
  something like \code{exprs[exprs \%in\% 0] <- NA} prior to imputing.
}
\examples{
  \dontrun{
    exprs <- log2(exprs + 1)
    exprs[exprs \%in\% 0] <- NA
    state <- list(expression=exprs)
    config <- list(log_file="")
    state2 <- f.impute_loess_logit(state, config, span.=1, gran=0.0001)
    exprs2 <- state2$expression

    config <- list(span.=1, gran=0.0001, log_file="")
    state2 <- f.impute_loess_logit(state, config)
    exprs2 <- state2$expression
 }
}
