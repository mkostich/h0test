% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute.R
\name{f.impute_min_prob}
\alias{f.impute_min_prob}
\title{Impute missing values with \code{imputeLCMD::impute.MinProb()}.}
\usage{
f.impute_min_prob(
  state,
  config,
  is_log_transformed = FALSE,
  impute_quantile = NULL,
  scale. = NULL
)
}
\arguments{
\item{state}{A list with elements like that returned by \code{f.read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Does not use any keys so 
can pass empty list.}

\item{is_log_transformed}{Logical scalar: if \code{state$expression} has 
been log transformed.}

\item{impute_quantile}{Quantile to use for imputation; scalar with 
\code{0 <= impute_quantile < 1.0}. Default: \code{0.01}.}

\item{scale.}{Scale parameter for normal distribution; scalar 
with \code{0 < scale.}. Default: \code{1.0}.}
}
\value{
An updated \code{state} list with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative imputed 
      expression values. \cr
    \code{features}   \cr \tab Feature meta-data \code{data.frame} 
      corresponding to rows of \code{expression}. \cr
    \code{samples}    \cr \tab Observation meta-data \code{data.frame} 
      corresponding to columns of \code{expression}. \cr
  }
}
\description{
Impute missing values with \code{imputeLCMD::impute.MinProb()}.
}
\details{
Only \code{NAs} considered missing. If you want \code{0} to be considered 
    missing, do something like \code{exprs[exprs \%in\% 0] <- NA} prior to 
    imputing.
}
\examples{
## setup state and config, including prefiltering:
set.seed(101)
nsamps <- 6
sim <- h0testr::f.sim2(n_samps1=nsamps, n_samps2=nsamps, n_genes=100, 
  n_genes_signif=20, fold_change=1, peps_per_gene=1, reps_per_sample=1)
exprs <- sim$mat
feats <- data.frame(gene=rownames(exprs))
samps <- data.frame(
  obs=colnames(exprs), 
  grp=factor(c(rep("ctl", nsamps), rep("trt", nsamps))),
  sex=factor(rep(c("M", "F"), nsamps))
)
state <- list(expression=exprs, features=feats, samples=samps)
rm(nsamps, sim, exprs, feats, samps)
config <- list()
state <- h0testr::f.filter_features(state, config, n_samples_min=3)
state <- h0testr::f.filter_observations(state, config, n_features_min=30)

## untransformed example:
state2 <- h0testr::f.impute_min_prob(state, config)
summary(c(state$expression))    ## Note number of NAs
summary(c(state2$expression))   ## Note number of NAs
head(state$expression)
round(head(state2$expression))

## log-transformed example:
state$expression <- log2(state$expression + 1)
state2 <- h0testr::f.impute_min_prob(state, config, is_log_transformed=TRUE)
summary(c(state$expression))    ## Note number of NAs
summary(c(state2$expression))   ## Note number of NAs
head(state$expression)
round(head(state2$expression))
}
