% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normalize.R
\name{f.normalize}
\alias{f.normalize}
\title{Inter-sample normalization}
\usage{
f.normalize(state, config)
}
\arguments{
\item{state}{List with elements formatted like the list returned by \code{f.read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Uses the following keys:
\tabular{ll}{
  \code{norm_method}   \cr \tab Character scalar in \code{c("vsn","cpm","quantile","qquantile","TMM","TMMwsp","RLE","upperquartile")}. \cr
  \code{norm_quantile} \cr \tab Quantile (numeric between 0 and 1) for \code{norm_method \%in\% c("quantile", "upperquartile")}. \cr
  \code{feat_col}      \cr \tab Column of \code{state$features} matching \code{rownames(state$expression)}. \cr
  \code{obs_col}       \cr \tab Column in \code{state$samples} matching \code{colnames(state$expression)}. \cr
}}
}
\value{
A list (the processed state) with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
Normalize expression data to reduce effects of technical differences 
    between samples.
}
\details{
Inter-observation normalization using any of the methods available in this package.
    See individual methods for more details.
  See documentation for \code{h0testr::f.new_config()} 
    for more detailed description of configuration parameters.
}
\examples{
set.seed(101)
exprs <- h0testr::f.sim1(n_obs=6, n_feats=12)$mat
exprs[, 4:6] <- exprs[, 4:6] * 2
feats <- data.frame(feature_id=rownames(exprs))
samps <- data.frame(observation_id=colnames(exprs))
state <- list(expression=exprs, features=feats, samples=samps)

config <- list(save_state=FALSE, norm_method="RLE", 
  feat_col="feature_id", obs_col="observation_id")
out <- h0testr::f.normalize(state, config)
summary(apply(state$expression, 2, sd, na.rm=TRUE))
summary(apply(out$state$expression, 2, sd, na.rm=TRUE))
summary(apply(state$expression, 1, sd, na.rm=TRUE))
summary(apply(out$state$expression, 1, sd, na.rm=TRUE))

config$norm_method <- "quantile"
config$norm_quantile <- 0.5
out <- h0testr::f.normalize(state, config)
summary(apply(state$expression, 2, sd, na.rm=TRUE))
summary(apply(out$state$expression, 2, sd, na.rm=TRUE))
summary(apply(state$expression, 1, sd, na.rm=TRUE))
summary(apply(out$state$expression, 1, sd, na.rm=TRUE))
}
