% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normalize.R
\name{f.normalize}
\alias{f.normalize}
\title{Inter-sample normalization}
\usage{
f.normalize(state, config)
}
\arguments{
\item{state}{List with elements formatted like the list returned by \code{f.read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Uses the following keys:
\tabular{ll}{
  \code{log_file}        \cr \tab Path to log file (character); \code{log_file=""} outputs to console. \cr
  \code{norm_method}     \cr \tab In \code{c("vsn","cpm","quantile","qquantile","TMM","TMMwsp","RLE","upperquartile")}. \cr
  \code{norm_quantile}   \cr \tab Quantile (numeric between 0 and 1) for \code{norm_method \%in\% c("quantile", "upperquartile")}. \cr
}}
}
\value{
A list (the processed state) with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
Normalize expression data to reduce effects of technical differences 
    between samples.
}
\details{
Inter-observation normalization using any of the methods available in this package.
}
\examples{
set.seed(101)
exprs <- h0testr::f.sim1(n_obs=6, n_feats=12)$mat
exprs[, 4:6] <- exprs[, 4:6] * 2
feats <- data.frame(feature_id=rownames(exprs))
samps <- data.frame(observation_id=colnames(exprs))
state <- list(expression=exprs, features=feats, samples=samps)
config <- list(log_file="", norm_method="RLE", save_state=FALSE)
out <- h0testr::f.normalize(state, config)
f.cv <- function(v) sd(v, na.rm=TRUE) / mean(v, na.rm=TRUE)
summary(apply(log2(state$expression + 1), 1, f.cv))
summary(apply(out$state$expression, 1, f.cv))

config <- list(log_file="", norm_method="quantile", norm_quantile=0.5, save_state=FALSE)
out <- h0testr::f.normalize(state, config)
f.cv <- function(v) sd(v, na.rm=TRUE) / mean(v, na.rm=TRUE)
summary(apply(log2(state$expression + 1), 1, f.cv))
summary(apply(out$state$expression, 1, f.cv))
}
