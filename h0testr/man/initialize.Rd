% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/initialize.R
\name{initialize}
\alias{initialize}
\title{Preprocess covariates and parameters in config}
\usage{
initialize(state, config, initialized = F, minimal = F)
}
\arguments{
\item{state}{List with elements formatted like the list returned by \code{f.read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Keys 
\code{c("n_samples_expr_col", "median_raw_col", "n_features_expr_col")} 
  not needed if \code{minimal=TRUE}:
\tabular{ll}{
  \code{obs_id_col}           \cr \tab Column in \code{state$samples} corresponding to \code{colnames(state$expression)}. \cr
  \code{sample_id_col}        \cr \tab Column in \code{state$samples} with unique sample labels. \cr
  \code{feat_id_col}          \cr \tab Column in \code{state$features} corresponding to \code{rownames(state$expression)}. \cr
  \code{gene_id_col}          \cr \tab Column in \code{state$features} with unique gene/protein group ids. \cr
  \code{frm}                  \cr \tab Formula object specifying formula to be fit. \cr
  \code{test_term}            \cr \tab Term (character) in \code{config$frm} to test for significance. \cr
  \code{sample_factors}       \cr \tab List with levels of factor variables in \code{config$frm}. \cr
  \code{n_samples_expr_col}   \cr \tab Column in \code{state$features} that corresponds to columns of \code{data_file_in}. \cr
  \code{median_raw_col}       \cr \tab Column in \code{state$features} that corresponds to columns of \code{data_file_in}. \cr
  \code{n_features_expr_col}  \cr \tab Column in \code{state$samples} that corresponds to columns of \code{data_file_in}. \cr
}}

\item{initialized}{Logical scalar indicating if \code{state} has already 
has filter statistics initialized.}

\item{minimal}{Logical scalar indicating whether only minimal set of 
parameters needed for formula processing should be required.}
}
\value{
A list with the following two elements:
  \tabular{ll}{
    \code{state}   \cr \tab List with elements \code{c("expression", "features", "samples")}.
    \code{config}  \cr \tab List with configuration settings.
  }
  The element \code{state} is a list with the following three elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
Check \code{config} vs. \code{state}, check covariates in \code{config$frm},
    and set factor levels.
}
\details{
Checks to make sure columns specified in \code{config} parameters are 
    found in \code{state$features} and \code{state$samples}.
  Check covariates referred to in \code{config$frm} are found in 
    \code{state$samples}, subsets only the needed variables into 
    \code{state$samples}, and sets covariate factor levels 
    according to \code{config$sample_factors}.
  Flow is:
    \tabular{l}{
      1. \code{check_config()}. \cr
      2. Subset covariates in \code{config$frm}. \cr
      3. Check feat_col and obs_col. \cr
      4. Subset covariates of interest. \cr
      5. Set covariate factor levels. \cr
      6. Return sub-table of ANOVA results corresponding to 
           \code{config$test_term}. \cr
    }
  If \code{initialized=FALSE}, then checks if \code{state$features} has 
    columns with names in 
    \code{c(config$n_samples_expr_col, config$median_raw_col)}; and if 
    \code{state$samples} has a column named \code{config$n_features_expr_col}. 
    If either is \code{TRUE}, results in error.
  See documentation for \code{h0testr::new_config()} 
    for more detailed description of configuration parameters.
}
\examples{
exprs <- h0testr::sim1(n_obs=6, n_feats=12)$mat
feats <- data.frame(feature_id=rownames(exprs), gene_id=rownames(exprs))
samps <- data.frame(observation_id=colnames(exprs), 
  condition=c(rep("ctl", 3), rep("trt", 3)))
state <- list(expression=exprs, features=feats, samples=samps)

## minimal:
config <- list(
  obs_id_col="observation_id",
  sample_id_col="observation_id",
  feat_id_col="feature_id",
  gene_id_col="gene_id",
  frm=~condition,
  test_term="condition",
  sample_factors=list(condition=c("ctl", "trt"))
)
out <- h0testr::initialize(state, config, minimal=TRUE)
print(out$state)
str(out$config)

config <- list(
  obs_id_col="observation_id",
  sample_id_col="observation_id",
  feat_id_col="feature_id",
  gene_id_col="gene_id",
  frm=~condition,
  test_term="condition", 
  sample_factors=list(condition=c("ctl", "trt")),
  n_samples_expr_col="n_samples_exprs",
  median_raw_col="median_raw",
  n_features_expr_col="n_features_exprs"
)
out <- h0testr::initialize(state, config)
print(out$state)
str(out$config)
}
