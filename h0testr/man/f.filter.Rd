% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter.R
\name{f.filter}
\alias{f.filter}
\title{Filter features and samples}
\usage{
f.filter(state, config)
}
\arguments{
\item{state}{A list with elements like that returned by `f.read_data()`:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Uses the following keys:
\tabular{ll}{
  \code{feat_col}            \cr \tab Name of column in \code{state$features} matching \code{rownames(state$expression)}.
  \code{obs_col}             \cr \tab Name of column in \code{state$samples} matching \code{colnames(state$expression)}.
  \code{n_features_min}      \cr \tab Minimum number (non-negative numeric) of features expressed in observation to keep observation. \cr
  \code{n_samples_min}       \cr \tab Minimum number (non-negative numeric) of samples expressing feature to keep feature. \cr
  \code{median_raw_col}      \cr \tab Name (character) of new column in feature metadata to hold median expression in expressing samples. \cr
  \code{n_samples_expr_col}  \cr \tab Name (character) of new column in feature metadata to hold number of expressing samples. \cr
  \code{n_features_expr_col} \cr \tab Name (character) of new column in sample metadata to hold number of expressed features. \cr
}}
}
\value{
A list with elements like that returned by `f.read_data()`:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
Filter features and samples based on expression.
}
\details{
Filters out features with too few expressing samples, and filters out 
    samples with too few expressed features. Features are considered to be 
    expressed if \code{state$expression > 0}; \code{NA}s count as no expression.
  See documentation for \code{h0testr::f.new_config()} 
    for more detailed description of configuration parameters.
}
\examples{
set.seed(101)
exprs <- h0testr::f.sim1(n_obs=6, n_feats=12, mcar_p=0.25)$mat
feats <- data.frame(feature_id=rownames(exprs))
samps <- data.frame(observation_id=colnames(exprs))
state <- list(expression=exprs, features=feats, samples=samps)

## assume default median_raw_col, n_samples_expr_col, and n_features_expr_col are ok:
config <- h0testr::f.new_config()
config$feat_col <- config$feat_id_col
config$obs_col <- config$obs_id_col
config$n_features_min <- 6
config$n_samples_min <- 2
config$save_state <- FALSE           ## so doesn't write output file
out <- h0testr::f.filter(state, config)
print(out$state)
str(out$config)
}
