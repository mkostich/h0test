% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/initialize.R
\name{f.permute}
\alias{f.permute}
\title{Permute data}
\usage{
f.permute(state, config, variable = NULL)
}
\arguments{
\item{state}{List with elements formatted like the list returned by \code{f.read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Requires the following keys:
\tabular{ll}{
  \code{feat_id_col}    \cr \tab Name of column (character) in \code{feature_file_in} that corresponds to rows of \code{data_file_in}. \cr
  \code{sample_id_col}  \cr \tab Name of column (character) in \code{sample_file_in} with unique sample identifiers. \cr
}}

\item{variable}{Character name of variable (column in samples) to permute.}
}
\value{
A list (the permuted state) with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
Permute observation covariate
}
\details{
If variable is \code{NULL}, uses \code{config$permute_var} instead. If variable is 
  \code{NULL} and \code{config$permute_var == ""}, skips permutation (normal execution).
}
\examples{
set.seed(101)
exprs <- h0testr::f.sim1(n_obs=6, n_feats=12)$mat
feats <- data.frame(feature_id=rownames(exprs))
samps <- data.frame(observation_id=colnames(exprs), age=c(rep("young", 3), rep("old", 3)))
state <- list(expression=exprs, features=feats, samples=samps)
config <- list(feat_id_col="feature_id", obs_id_col="observation_id", 
  sample_id_col="observation_id", permute_var="age")
state2 <- h0testr::f.permute(state, config)
print(state)
print(state2)
}
