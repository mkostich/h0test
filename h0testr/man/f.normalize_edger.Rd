% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normalize.R
\name{f.normalize_edger}
\alias{f.normalize_edger}
\title{Normalize expression using \code{edgeR}}
\usage{
f.normalize_edger(state, config, method = NULL, p = NULL)
}
\arguments{
\item{state}{List with elements formatted like the list returned by \code{f.read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Uses the following keys:
\tabular{ll}{
  \code{log_file}        \cr \tab Path to log file (character); \code{log_file=""} outputs to console. \cr
  \code{norm_method}     \cr \tab Normalization method in \code{c("vsn","cpm","quantile","qquantile","TMM","TMMwsp","RLE","upperquartile")}. \cr
  \code{norm_quantile}   \cr \tab Quantile to use for \code{norm_method \%in\% c("quantile", "upperquartile")}. \cr
}}

\item{method}{Character in set
\code{c("TMM", "TMMwsp", "RLE", "upperquartile", "none")}.}

\item{p}{Numeric in closed interval \code{[0, 1]} specifying quantile to use for method 
\code{upperquartile}.}
}
\value{
A list (the processed state) with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
Normalize expression using functionality from \code{edgeR} package.
}
\details{
Inter-observation normalization. \code{edgeR::calcNormFactors()} 
  called under the hood. Returned values on a counts-per-million scale.
}
\examples{
  \dontrun{
    state <- list(expression=exprs)
    config <- list(norm_method="TMM", log_file="")
    state <- f.normalize_edger(state, config)
    norm_exprs <- state$expression

    config <- list(norm_method="upperquartile", norm_quantile=0.75, log_file="")
    state <- f.normalize_edger(state, config)
    norm_exprs <- state$expression

    config <- list(log_file="")
    state <- f.normalize_edger(state, config, method="upperquartile", p=0.75)
    norm_exprs <- state$expression
  }
}
