% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normalize.R
\name{f.normalize_loess}
\alias{f.normalize_loess}
\title{Cyclic loess normalization.}
\usage{
f.normalize_loess(state, config, span = NULL, method = "affy")
}
\arguments{
\item{state}{List with elements formatted like the list returned by `f.read_data()`:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Does not use any keys, so can pass empty list.}

\item{span}{Numeric between 0 and 1 specifying span for loess fit.
Higher numbers result in smoother (less localized) fit.}

\item{method}{Character in \code{c("fast", "affy", "pairs")}.}
}
\value{
A list (the processed state) with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
Normalize expression using the cyclic-loess algorithm.
}
\details{
Inter-observation normalization using cyclic-loess results
    in similar signal distributions across all samples, similar to 
    \code{f.normalize_qquantile()}. This is a slow method, especially if
    \code{method \%in\% c("affy", "pairs")}, which scale quadratically. Calls
    \code{limma::normalizeCyclicLoess()} under the hood.
  See documentation for \code{h0testr::f.new_config()} 
    for more detailed description of configuration parameters.
}
\examples{
set.seed(101)
exprs <- h0testr::f.sim1(n_obs=6, n_feats=30, mnar_c0=-Inf)$mat
feats <- data.frame(feature_id=rownames(exprs))
samps <- data.frame(observation_id=colnames(exprs))
state <- list(expression=exprs, features=feats, samples=samps)
config <- list()
state2 <- h0testr::f.normalize_loess(state, config)
head(state$expression)
head(state2$expression)
summary(apply(state$expression, 2, sd, na.rm=TRUE))
summary(apply(state2$expression, 2, sd, na.rm=TRUE))
summary(apply(state$expression, 1, sd, na.rm=TRUE))
summary(apply(state2$expression, 1, sd, na.rm=TRUE))
}
