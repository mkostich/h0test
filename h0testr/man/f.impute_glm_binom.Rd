% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute.R
\name{f.impute_glm_binom}
\alias{f.impute_glm_binom}
\title{Impute by drawing from `p(missing|intensity)` from binomial glm.}
\usage{
f.impute_glm_binom(state, config, gran = NULL, off = 1, f_mid = stats::median)
}
\arguments{
\item{state}{A list with elements like that returned by `f.read_data()`:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  } 
It is assumed that state$expression has been previously `log2(x+1)` transformed.}

\item{config}{List with configuration settings.}

\item{gran}{Numeric greater than zero. Granularity of prediction 
grid. Smaller values lead to less chance of duplicate imputed values.
Larger values require more compute time and memory.}

\item{off}{Numeric offset for calculating 
`p.missing = (n.missing + off) / (n.total + off)`.}

\item{f_mid}{Function to use for calculating central tendency of 
feature expression across samples.}
}
\value{
An updated `state` list with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
`f.impute_glm_binom` imputes missing values by randomly drawing
  from an estimated density of `p(missing|intensity)`.
}
\details{
Impute random draws by drawing from the estimated density of 
  `p(missing|intensity)`. Estimates `p(missing|intensity)` using a 
  binomial glm with formula `cbind(n.missing, n.found) ~ intensity`,
  want `0` to be considered missing, and have `0` in the data, do 
  something like `exprs[exprs %in% 0] <- NA` prior to imputing.
}
\examples{
  \dontrun{
    exprs <- log2(exprs + 1)
    exprs[exprs \%in\% 0] <- NA
    state <- list(expression=exprs)
    config <- list(log_file="")
    state2 <- f.impute_glm_binom(state, config, impute_granularity=0.0001)
    exprs2 <- state2$expression

    config <- list(gran=0.0001, log_file="")
    state2 <- f.impute_glm_binom(state, config)
    exprs2 <- state2$expression
  }
}
