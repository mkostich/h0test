% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aggregate.R
\name{f.combine_peps}
\alias{f.combine_peps}
\title{Combine low-level features into high-level features}
\usage{
f.combine_peps(state, config, method = NULL, rescale = FALSE)
}
\arguments{
\item{state}{List with elements formatted like the list returned by \code{f.read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Uses the following keys:
\tabular{ll}{
  \code{obs_col}         \cr \tab Name of column in \code{state$samples} matching \code{colnames(state$expression)}. \cr
  \code{feat_col}        \cr \tab Name of column in \code{state$features} matching \code{rownames(state$expression)}. \cr
  \code{gene_id_col}     \cr \tab Name of column in \code{state$features} specifying high-level feature for aggregation. \cr
  \code{save_state}      \cr \tab Logical scalar indicating whether to save new state to disk. \cr
  \code{dir_out}         \cr \tab Output directory path (scalar character); only needed if \code{save_state == TRUE}. \cr
  \code{data_mid_out}    \cr \tab Midfix of expression matrix filename; only needed if \code{save_state == TRUE}.\cr
  \code{feature_mid_out} \cr \tab Midfix of feature metadata filename; only needed if \code{save_state == TRUE}.\cr
  \code{sample_mid_out}  \cr \tab Midfix of sample metadata filename; only needed if \code{save_state == TRUE}.\cr
  \code{suffix_out}      \cr \tab Suffix of output files; only needed if \code{save_state == TRUE}.\cr
}}

\item{method}{Name (character scalar) of method to use for combining, 
where \code{method \%in\% c("medianPolish", "robustSummary", "none")}.}

\item{rescale}{Logical scalar indicating whether to rescale peptides prior to aggregation.}
}
\value{
A list (the processed state) with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
Combine e.g. peptide signals into gene group signals
}
\details{
Combines signals from lower-level features, like peptides, 
    into higher level features, like gene groups or protein groups.
  Sets \code{config$feat_col} and \code{config$feat_id_col} to 
    \code{config$gene_id_col}.
  If \code{rescale \%in\% TRUE}, peptides rescaled by dividing by 
    peptide mean (after removing \code{NA}s).
  For \code{method="medianPolish"}, for each unique gene in 
    \code{state$features[, config$gene_id_col]}, the submatrix of 
      corresponding peptide signals across all samples is decomposed into: 
      \code{pep_exprs == median_column_effect + median_row_effect + overall_median},
    Then \code{median_column_effect} is returned, after shifted to 
      ensure all values strictly positive: \code{all(expression > 0, na.rm=TRUE)}.
  Uses \code{MsCoreUtils::medianPolish} and \code{MsCoreUtils::robustSummary}.
}
\examples{
## set up data for examples:
set.seed(101)
exprs <- h0testr::f.sim2(n_samps1=3, n_samps2=3, n_genes=5, n_genes_signif=1, peps_per_gene=3, reps_per_sample=1)$mat
tmp <- strsplit(rownames(exprs), "_")
feats <- data.frame(pep=rownames(exprs), gene=sapply(tmp, "[", 1))
tmp <- strsplit(colnames(exprs), "_")
samps <- data.frame(obs=colnames(exprs), grp=sapply(tmp, "[", 1))
state <- list(expression=exprs, features=feats, samples=samps)
config <- list(feat_id_col="pep", gene_id_col="gene", obs_col="obs", feat_col="pep",
  feature_aggregation="medianPolish", save_state=FALSE)
rm(tmp, exprs, feats, samps)
print(state)
str(config)

## combine reps using config$feature_aggregation ("medianPolish"):
out <- h0testr::f.combine_peps(state, config)
print(out$state)
str(out$config)

## combine reps, overriding config$feature_aggregation:
out <- h0testr::f.combine_peps(state, config, method="robustSummary")
print(out$state)
str(out$config)

## combine reps with rescaling:
out <- h0testr::f.combine_peps(state, config, rescale=TRUE)
print(out$state)
str(out$config)

## with method="none":
out <- h0testr::f.combine_peps(state, config, method="none")
print(out$state)
str(out$config)
}
