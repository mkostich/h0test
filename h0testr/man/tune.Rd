% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.R
\name{tune}
\alias{tune}
\title{Basic tuning loop}
\usage{
tune(
  config,
  normalization_methods = c("RLE", "upperquartile", "q50", "q75", "quantiles.robust",
    "cpm", "max", "div.mean", "TMMwsp", "vsn", "qquantile", "log2", "none"),
  impute_methods = c("sample_lod", "unif_sample_lod", "unif_global_lod", "rnorm_feature",
    "glm_binom", "loess_logit", "glmnet", "rf", "knn", "min_det", "min_prob", "qrilc",
    "bpca", "ppca", "svdImpute", "lls", "missforest", "none"),
  impute_quantiles = c(0, 0.01, 0.05, 0.1),
  impute_scales = c(1, 0.33, 0.1),
  impute_spans = c(0.25, 0.5, 0.75),
  impute_npcs = c(3, 5, 10),
  impute_ks = c(5, 10, 20),
  test_methods = c("lm", "trend", "deqms", "msqrob", "proda", "prolfqua", "voom")
)
}
\arguments{
\item{config}{List with configuration values like those returned by \code{new_config()}.}

\item{normalization_methods}{Character vector of methods to try. One or more of:
\code{c("RLE", "upperquartile", "q50", "q75", "quantiles.robust", "cpm", "max", "div.mean", "TMMwsp", "vsn", "qquantile", "log2", "none")}.}

\item{impute_methods}{Character vector of methods to try. One or more of:
\code{c("sample_lod", "unif_sample_lod", "unif_global_lod", "rnorm_feature", "glm_binom", "loess_logit", "glmnet", "rf", "knn", "min_det", "min_prob", "qrilc", "bpca", "ppca", "svdImpute", "lls", "missforest", "none")}.}

\item{impute_quantiles}{Numeric vector of quantiles to try for \code{impute_unif_*} methods. 
One or more values between \code{0.0} and \code{1.0}.}

\item{impute_scales}{Numeric vector of scales to try for \code{impute_rnorm_feature}. 
See \code{impute_rnorm_feature()} \code{scale}. parameter.}

\item{impute_spans}{Numeric vector of spans to try for \code{impute_loess_logit}.}

\item{impute_npcs}{Numeric vector of N PCs to try for \code{impute_method \%in\% c("bpca", "ppca", "svdImpute")}.}

\item{impute_ks}{Numeric vector of \code{k} to use for \code{impute_method \%in\% c("knn", "lls")}.}

\item{test_methods}{Character vector with one or more of: 
\code{c("voom", "trend", "deqms", "msqrob", "proda")}.}
}
\value{
A data.frame with the following columns:
  \tabular{ll}{
    \code{norm}       \cr \tab Normalization method (character). \cr
    \code{norm_quant} \cr \tab Normalization quantile (numeric). \cr
    \code{impute}     \cr \tab Imputation method (character). \cr
    \code{imp_quant}  \cr \tab Imputation quantile (numeric). \cr
    \code{scale}      \cr \tab Imputation scale for \code{impute_rnorm_feature}. \cr
    \code{test}       \cr \tab Test method (character). \cr
    \code{perm}       \cr \tab Permuted variable (character). \cr
    \code{nhits}      \cr \tab Number of hits (numeric). \cr
    \code{ntests}     \cr \tab Number of tests (numeric). \cr
    \code{time}       \cr \tab Timestamp. \cr
  }
}
\description{
Run a basic tuning loop according.
}
\details{
Run a basic tuning loop that iterates over parameter combinations, 
    performing the following:
    \tabular{l}{
      1. Read data, prefilter, and optionally permute with \code{load_data()}. \cr
      1. Inter-observation normalization with \code{normalize()}. \cr
      2. Combine replicate observations wtih \code{combine_replicates()}. \cr
      3. Combine peptides into gene/protein groups with \code{combine_features()}. \cr
      4. Filter uninformative features and observations with \code{filter()}. \cr
      5. Impute missing values with \code{impute()}. \cr
      6. Hypothesis testing with \code{test()}. \cr
    }
  Normally, one does one run with \code{config$permute_var=""}, and 
    \code{N} runs (we recommend \code{N >= 20}) with 
    \code{config$permute_var} set to the name of a variable in 
    \code{config$test_term}.
  Currently tunes the following \code{config} values: \code{normalization_method}, 
    \code{normalization_quantile}, \code{impute_method}, \code{impute_quantile}, 
    \code{impute_scale}, \code{impute_span}, \code{impute_k}, 
    \code{impute_npcs}, and \code{test_method}. Notably, does not currently 
    tune \code{impute_alpha}, \code{impute_aug_steps}, or \code{run_order}. 
  See documentation for \code{h0testr::new_config()} 
    for more detailed description of configuration parameters.
}
\examples{
## set up configuration:
config <- h0testr::new_config()     ## defaults
config$save_state <- FALSE          ## default is TRUE
config$dir_in <- system.file("extdata", package="h0testr")  ## where example data 
config$feature_file_in <- "features.tsv"
config$sample_file_in <- "samples.tsv"
config$data_file_in <- "expression.tsv" 
config$feat_id_col <- config$gene_id_col <- "feature_id"
config$obs_id_col <- config$sample_id_col <- "observation_id"
config$n_features_min <- 10         ## default 1000 too big for small demo dataset
config$frm <- ~condition
config$test_term <- "condition"
config$test_method <- "trend"
config$sample_factors <- list(condition=c("placebo", "drug"))

## one run with unpermuted data:
config$permute_var <- ""            ## no permutation
set.seed(101)
out1 <- h0testr::tune(config,
  normalization_methods=c("RLE", "q75", "cpm", "log2"),
  impute_methods=c("sample_lod", "unif_sample_lod", "none"),
  impute_quantiles=c(0, 0.05, 0.1),
  test_methods=c("trend", "msqrob", "proda", "prolfqua")
)
## write.table(out1, "0.condition.tune.tsv", quote=F, sep="\t", row.names=F)

## one run with permuted data; run 20+ such runs w/ suffices 1:20:
config$permute_var <- "condition"   ## permute variable in test_term
set.seed(101)
out2 <- h0testr::tune(config,
  normalization_methods=c("RLE", "q75", "cpm", "log2"),
  impute_methods=c("sample_lod", "unif_sample_lod", "none"),
  impute_quantiles=c(0, 0.05, 0.1),
  test_methods=c("trend", "msqrob", "proda", "prolfqua")
)
## write.table(out2, "1.condition.tune.tsv", quote=F, sep="\t", row.names=F)
}
