% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute.R
\name{f.impute_rnorm_feature}
\alias{f.impute_rnorm_feature}
\title{Impute missing values near the feature mean.}
\usage{
f.impute_rnorm_feature(state, config, scale. = NULL)
}
\arguments{
\item{state}{A list with elements like that returned by \code{f.read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Uses the following keys:
\tabular{ll}{
  \code{impute_scale}  \cr \tab Factor (numeric) rescaling variance of normal distribution from which draws are made. See details.
}}

\item{scale.}{Numeric greater than zero, linearly scaling the
dispersion around the feature mean.}
}
\value{
An updated \code{state} list with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
Impute missing values normally distributed around the feature mean.
}
\details{
Missing values are draws from 
  \code{normal(mean=mean(exprs[feature, ]), sd=scale.*sd(exprs[feature, ]))}. 
  Only non-\code{NA} values are used in calculation of \code{mean} and 
  \code{sd}. If you want \code{0} to be considered missing, and have 
  \code{0} in the data, do something like \code{exprs[exprs \%in\% 0] <- NA} 
  prior to imputing. All values are gauranteed non-negative.
  See documentation for \code{h0testr::f.new_config()} 
    for more detailed description of configuration parameters.
}
\examples{
set.seed(101)
exprs <- h0testr::f.sim1(n_obs=6, n_feats=12)$mat
exprs <- log2(exprs + 1)
feats <- data.frame(feature_id=rownames(exprs))
samps <- data.frame(observation_id=colnames(exprs))
state <- list(expression=exprs, features=feats, samples=samps)
config <- list(impute_scale=1)
state2 <- h0testr::f.impute_rnorm_feature(state, config)
summary(c(state$expression))   ## note number of NAs
summary(c(state2$expression))  ## note number of NAs
}
