% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute.R
\name{f.impute_unif_sample_lod}
\alias{f.impute_unif_sample_lod}
\title{Impute missing values from between 0 and sample LOD.}
\usage{
f.impute_unif_sample_lod(state, config, impute_quantile = 0)
}
\arguments{
\item{state}{A list with elements like that returned by `f.read_data()`:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration settings.}

\item{impute_quantile}{Numeric between 0 and 1 specifying 
minimum non-zero/NA expression value in each observation to use as the
observation-specific LOD (limit of detection).}
}
\value{
An updated `state` list with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
`f.impute_unif_sample_lod` imputes missing values by randomly drawing 
  from uniform distribution below an estimated observation-specific LOD.
}
\details{
Imputed values are random draws from uniform distribution over the 
  interval [0, LOD], where LOD is an estimate observation limit of 
  detection. Only NA values are considered as missing, so if you want `0` 
  to be considered missing, and have `0` in the data, do something like 
  `exprs[exprs %in% 0] <- NA` prior to imputing.
}
\examples{
  \dontrun{
    exprs[exprs \%in\% 0] <- NA
    state <- list(expression=exprs)
    config <- list(log_file="")
    state2 <- f.impute_unif_sample_lod(state, config, impute_quantile=0.01)
    exprs2 <- state2$expression

    config <- list(impute_quantile=0.01, log_file="")
    state2 <- f.impute_unif_sample_lod(state, config)
    exprs2 <- state2$expression
  }
}
