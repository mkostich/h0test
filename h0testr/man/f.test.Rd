% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test.R
\name{f.test}
\alias{f.test}
\title{Hypothesis testing}
\usage{
f.test(
  state,
  config,
  method = NULL,
  is_log_transformed = NULL,
  prior_df = NULL
)
}
\arguments{
\item{state}{List with elements formatted like the list returned by \code{f.read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Uses the following keys:
\tabular{ll}{
  \code{feat_col}       \cr \tab Name of column in \code{state$fetaures} matching \code{rownames(state$expression)}. \cr
  \code{obs_col}        \cr \tab Name of column in \code{state$samples} matching \code{colnames(state$expression)}. \cr
  \code{gene_id_col}    \cr \tab Name of column in \code{state$fetaures} with gene/protein-group ids. \cr
  \code{frm}            \cr \tab Formula (formula) to be fit \cr
  \code{test_term}      \cr \tab Term (character scalar) to be tested for non-zero coefficient. \cr
  \code{sample_factors} \cr \tab List specifying levels of factor variables in \code{config$frm} (see examples). \cr
  \code{test_method}    \cr \tab Character scalar in \code{c("voom", "trend", "deqms", "msqrob", "proda"}. \cr
}}

\item{method}{Name of test method where 
\code{method \%in\% h0testr::f.test_methods()}.}

\item{is_log_transformed}{Logical scalar: if \code{state$expression} has 
been log transformed. Required if 
\code{method \%in\% c("proda", "prolfqua")}.}

\item{prior_df}{Prior degrees of freedom for method \code{proda}; 
where \code{2 <= prior_df <= n_features}.}
}
\value{
A list with the following elements: \cr
  \tabular{ll}{
    \code{original} \cr \tab A \code{data.frame} with results in native format returned by test. \cr
    \code{standard} \cr \tab A \code{data.frame} with results in a standardized format \cr
  } \cr
  The \code{standard} \code{data.frame} has the following fields: \cr
  \tabular{ll}{
    \code{feature}   \cr \tab Name of feature tested. \cr
    \code{expr}      \cr \tab Average feature expression. \cr
    \code{logfc}     \cr \tab Estimated log fold-change between conditions. \cr
    \code{stat}      \cr \tab Value of test statistic. \cr
    \code{lod}       \cr \tab Log-odds of differential expression. \cr
    \code{pval}      \cr \tab Raw p-value resulting from test. \cr
    \code{adj_pval}  \cr \tab Adjusted (for multiple testing) p-value. \cr
  }
}
\description{
Wrapper for various hypothesis testing methods.
}
\details{
Tests for differential expression using method specified in config. 
  See invididual \code{f.test_*} methods for more details. 
  The \code{method} setting meanings are: 
  \tabular{ll}{
    \code{trend}  \cr \tab Use \code{limma::eBayes(trend=TRUE)}. \cr
    \code{deqms}  \cr \tab Use \code{DEqMS::spectraCounteBayes()}. \cr
    \code{msqrob} \cr \tab Use \code{msqrob2::msqrob()}. \cr
    \code{proda}  \cr \tab Use \code{proDA::proDA()}. \cr
    \code{voom}   \cr \tab Use \code{limma::voom()}. \cr
  } 
  See documentation for \code{h0testr::f.new_config()} 
    for more detailed description of configuration parameters.
}
\examples{
set.seed(101)
## no missing values: mnar_c0=-Inf, mnar_c1=0, mcar_p=0
exprs <- h0testr::f.sim2(n_samps1=6, n_samps2=6, n_genes=25, 
  n_genes_signif=5, fold_change=2, mnar_c0=-Inf, mnar_c1=0, mcar_p=0)$mat
exprs <- log2(exprs + 1)
feats <- data.frame(feature_id=rownames(exprs))
samps <- data.frame(observation_id=colnames(exprs), 
  condition=c(rep("placebo", 6), rep("drug", 6)))
state <- list(expression=exprs, features=feats, samples=samps)

config <- list(feat_id_col="feature_id", gene_id_col="feature_id", 
  obs_id_col="observation_id", sample_id_col="observation_id", 
  frm=~condition, test_term="condition",
  sample_factors=list(condition=c("placebo", "drug"))
)

## set up and check covariates and parameters:
out <- h0testr::f.initialize(state, config, minimal=TRUE)
state <- out$state
config <- out$config

out <- h0testr::f.test(state, config, method="trend")
head(out$original)
head(out$standard)
}
