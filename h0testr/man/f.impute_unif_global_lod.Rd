% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute.R
\name{f.impute_unif_global_lod}
\alias{f.impute_unif_global_lod}
\title{Impute missing values from between 0 and global LOD.}
\usage{
f.impute_unif_global_lod(state, config, impute_quantile = NULL)
}
\arguments{
\item{state}{A list with elements like that returned by \code{f.read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Uses the following keys:
\tabular{ll}{
  \code{log_file}         \cr \tab Path to log file (character); \code{log_file=""} outputs to console.
  \code{impute_quantile}  \cr \tab Quantile of signal distribution to use as estimated limit of detection (LOD).
}}

\item{impute_quantile}{Numeric between 0 and 1 specifying 
minimum non-zero/\code{NA} expression value for each feature to use as global
LOD (limit of detection). If \code{NULL}, \code{config$impute_quantile} used.}
}
\value{
An updated `state` list with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  } 
Returned \code{state$xpression} matrix contains strictly positive numeric values.
}
\description{
Impute missing values by randomly drawing from uniform distribution 
    below an estimated global LOD.
}
\details{
Imputed values are random draws from uniform distribution over the 
  interval \code{[0, LOD]}, where \code{LOD} is an estimate global limit of 
  detection. Only \code{NA} values are considered as missing, so if you want 
  \code{0} to be considered missing, and have \code{0} in the data, do 
  something like \code{state$expression[state$expression \%in\% 0] <- NA} 
  prior to imputing.
}
\examples{
set.seed(101)
exprs <- h0testr::f.sim1(n_obs=6, n_feats=12)$mat
feats <- data.frame(feature_id=rownames(exprs))
samps <- data.frame(observation_id=colnames(exprs))
state <- list(expression=exprs, features=feats, samples=samps)
config <- list(log_file="", impute_quantile=0.05)
state2 <- h0testr::f.impute_unif_global_lod(state, config)
print(state)
print(state2)
}
