% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.R
\name{f.tune}
\alias{f.tune}
\title{Basic tuning loop}
\usage{
f.tune(
  config,
  norm_methods = c("TMM", "TMMwsp", "RLE", "upperquartile", "q50", "q75", "cpm", "vsn",
    "qquantile", "log2", "none"),
  impute_methods = c("sample_lod", "unif_sample_lod", "unif_global_lod", "rnorm_feature",
    "glm_binom", "loess_logit", "glmnet", "rf", "none"),
  impute_quantiles = c(0, 0.01, 0.05, 0.1, 0.25),
  impute_scales = c(1, 0.5, 0.25, 0.1),
  impute_spans = c(0.25, 0.5, 0.75),
  test_methods = c("voom", "trend")
)
}
\arguments{
\item{config}{List with configuration values like those returned by \code{f.new_config()}.}

\item{norm_methods}{Character vector of methods to try. One or more of:
\code{c("TMM", "TMMwsp", "RLE", "upperquartile", "q50", "q75", "cpm", "vsn", "qquantile", "log2", "none")}.}

\item{impute_methods}{Character vector of methods to try. One or more of:
\code{c("sample_lod", "unif_sample_lod", "unif_global_lod", "rnorm_feature", "glm_binom", "loess_logit", "glmnet", "rf", "none")}.}

\item{impute_quantiles}{Numeric vector of quantiles to try for \code{f.impute_unif_*} methods. 
One or more values between \code{0.0} and \code{1.0}.}

\item{impute_scales}{Numeric vector of scales to try for \code{f.impute_rnorm_feature}. 
See \code{f.impute_rnorm_feature()} \code{scale}. parameter.}

\item{impute_spans}{Numeric vector of spans to try for \code{f.impute_loess_logit}.}

\item{test_methods}{Character vector with one or more of: \code{c("trend", "voom")}.}
}
\value{
A data.frame with the following columns:
  \tabular{ll}{
    \code{norm}       \cr \tab Normalization method (character). \cr
    \code{norm_quant} \cr \tab Normalization quantile (numeric). \cr
    \code{impute}     \cr \tab Imputation method (character). \cr
    \code{imp_quant}  \cr \tab Imputation quantile (numeric). \cr
    \code{scale}      \cr \tab Imputation scale for \code{f.impute_rnorm_feature}. \cr
    \code{test}       \cr \tab Test method (character). \cr
    \code{perm}       \cr \tab Permuted variable (character). \cr
    \code{nhits}      \cr \tab Number of hits (numeric). \cr
    \code{ntests}     \cr \tab Number of tests (numeric). \cr
    \code{time}       \cr \tab Timestamp. \cr
  }
}
\description{
Run a basic tuning loop according.
}
\details{
Run a basic tuning loop that iterates over parameter combinations, 
    performing: 
    \code{f.normalize() -> f.combine_reps() -> f.filter() -> f.impute()}. 
    Do one run with \code{config$permute_var=""}, and \code{N} runs (we 
    recommend \code{N >= 20} with \code{config$permute_var} set to the 
    name of a variable in \code{config$test_term}.
  See documentation for \code{h0testr::f.new_config()} 
    for more detailed description of configuration parameters.
}
\examples{
config <- h0testr::f.new_config()
config$dir_in <- system.file("extdata", package="h0testr")  ## where example data 
config$feature_file_in <- "features.tsv"
config$sample_file_in <- "samples.tsv"
config$data_file_in <- "expression.tsv" 
config$feat_id_col <- config$gene_id_col <- "feature_id"
config$obs_id_col <- config$sample_id_col <- "observation_id"
config$frm <- ~condition
config$test_term <- "condition"
config$test_method <- "trend"
config$sample_factors <- list(condition=c("placebo", "drug"))
config$n_features_min <- 10         ## default 1000 too big for small demo dataset
config$save_state <- FALSE

## one run with unpermuted data:
config$permute_var <- ""            ## no permutation
set.seed(101)
out1 <- h0testr::f.tune(config,
  norm_methods=c("TMM", "RLE", "q75", "cpm", "log2", "none"),
  impute_methods=c("sample_lod", "unif_sample_lod", "none"),
  impute_quantiles=c(0, 0.1, 0.25)
)
## write.table(out1, "0.condition.tune.tsv", quote=F, sep="\t", row.names=F)

## one run with permuted data; run 20+ such runs w/ suffices 1:20:
config$permute_var <- "condition"   ## permute variable in test_term
set.seed(101)
out2 <- h0testr::f.tune(config,
  norm_methods=c("TMM", "RLE", "q75", "cpm", "log2", "none"),
  impute_methods=c("sample_lod", "unif_sample_lod", "none"),
  impute_quantiles=c(0, 0.1, 0.25)
)
## write.table(out2, "1.condition.tune.tsv", quote=F, sep="\t", row.names=F)
}
