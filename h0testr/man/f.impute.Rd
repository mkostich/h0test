% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/impute.R
\name{f.impute}
\alias{f.impute}
\title{Impute missing values}
\usage{
f.impute(state, config)
}
\arguments{
\item{state}{A list with elements like that returned by \code{f.read_data()}:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
It is assumed that \code{state$expression} has been previously \code{log2(x+1)} transformed.}

\item{config}{List with configuration settings.}
}
\value{
Updated \code{state} list with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
Impute missing values in \code{state$expression} according to settings
    in \code{config}.
}
\details{
Imputes missing values using a method and parameters specified in 
    \code{config}. Assumes expression data have been previously
    \code{log(x+1)} transformed. If you want \code{0} to be considered missing, 
    and have \code{0} in the data, do something like 
    \code{exprs[exprs \%in\% 0] <- 0} prior to imputing.
}
\examples{
  \dontrun{
    exprs[exprs \%in\% 0] <- NA
    state <- list(expression=exprs)
    config <- list(log_file="")
    state2 <- f.impute_glmnet(state, config, impute_quantile=0.01)
    exprs2 <- state2$expression

    state2 <- f.impute_glmnet(state, config, nfolds=3, alpha=0.5, aug_steps=2)
    state2 <- f.impute_glmnet(state, config)
    exprs2 <- state2$expression
  }
}
