% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.R
\name{run}
\alias{run}
\title{Run a basic workflow}
\usage{
run(config)
}
\arguments{
\item{config}{List with configuration values like those returned by 
\code{new_config()}.}
}
\value{
A list with the following elements: 
  \tabular{ll}{
    \code{state}    \cr \tab List with elements \code{$expression}, \code{$features}, and \code{$samples}. \cr
    \code{config}   \cr \tab List with configuration settings. \cr
    \code{original} \cr \tab A \code{data.frame} with native results of test. \cr
    \code{standard} \cr \tab A \code{data.frame} with results in standardized format. \cr
    \code{fit}      \cr \tab Fitted model from selected testing procedure.
  }
}
\description{
Run a basic workflow according to: \code{config$run_order}.
}
\details{
Run a basic workflow: \code{load_data() -> config$run_order -> test()}, 
    where \code{config$run_order} is vector of functions which are run in 
    the specified order.
  See documentation for \code{h0testr::new_config()} 
    for more detailed description of configuration parameters.
}
\examples{
config <- h0testr::new_config()          ## defaults
config$save_state <- FALSE               ## default is TRUE
config$dir_in <- system.file("extdata", package="h0testr")  ## where example data 
config$feature_file_in <- "features.tsv"
config$sample_file_in <- "samples.tsv"
config$data_file_in <- "expression.tsv" 
config$feat_id_col <- config$gene_id_col <- "feature_id"
config$obs_id_col <- config$sample_id_col <- "observation_id"
config$frm <- ~condition
config$test_term <- "condition"
config$test_method <- "trend"
config$sample_factors <- list(condition=c("placebo", "drug"))
config$n_features_min <- 10     ## default 1000 too big for small demo dataset
config$run_order <- c("normalize", "combine_replicates", "filter", "impute")

print(config$run_order)

result <- h0testr::run(config)     ## run workflow
head(result$original)              ## hit table as returned by underlying software
head(result$standard)              ## hit table in a standardized format
print(result$fit)                ## model fit by selected testing procedure
}
