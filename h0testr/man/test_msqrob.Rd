% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test.R
\name{test_msqrob}
\alias{test_msqrob}
\title{Hypothesis testing using the \code{msqrob2} package}
\usage{
test_msqrob(state, config, maxit = 100)
}
\arguments{
\item{state}{List with elements like those returned by \code{read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Requires the following keys:
\tabular{ll}{
  \code{gene_id_col}    \cr \tab Name of column in \code{state$features} with unique gene/protein group ids. \cr
  \code{feat_col}       \cr \tab Name of column in \code{state$features} corresponding to \code{rownames(state$expression)}. \cr
  \code{obs_col}        \cr \tab Name of column in \code{state$samples} corresponding to \code{colnames(state$expression)}. \cr
  \code{frm}            \cr \tab Formula (formula) to be fit. \cr
  \code{test_term}      \cr \tab Term (character) to be tested for non-zero coefficient. \cr
}}

\item{maxit}{Integer scalar >= 1. How many iterations to use for \code{rlm} fitting.}
}
\value{
A list with components:
  \tabular{ll}{
    \code{hits}  \cr \tab \code{data.frame} of results; columns \code{config$gene_id_col} and: 
      \code{c("nNonZero .n", "logFC", "se", "df", "t", "pval", "adjPval")}. \cr
    \code{fit}   \cr \tab Model returned by \code{msqrob2::hypothesisTest()}. \cr
  }
}
\description{
Tests for differential expression using the \code{msqrob2::msqrob()} function.
}
\details{
Returns gene-level hypothesis testing results based on 
    peptide/precursor-level input.
  Flow is:
    \tabular{l}{
      1. Create a \code{QFeatures} object with \code{QFeatures::readQFeatures()}. \cr
      2. Convert \code{NA}s to zero using \code{QFeatures::zeroIsNA()}. \cr
      3. Make gene/protein-group expression with \code{QFeatures::aggregateFeatures()}. \cr
      4. Estimate model parameters using \code{msqrob2::msqrob()}. \cr
      5. Calculate test statistics with \code{msqrob2::hypothesisTest()}. \cr
    }
  See documentation for \code{h0testr::new_config()} 
    for more detailed description of configuration parameters.
}
\examples{
## lengthy setup of expression data:
set.seed(101)
nsamps <- 6
sim <- h0testr::sim2(
  n_samps1=nsamps, n_samps2=nsamps, n_genes=100, n_genes_signif=20, 
  fold_change=1, peps_per_gene=10, reps_per_sample=1, 
  p_drop=0.33, mnar_c0=-Inf, mnar_c1=0, mcar_p=0
)
exprs <- sim$mat
gene <- strsplit(rownames(exprs), "_")
gene <- sapply(gene, function(v) unlist(v)[1])
feats <- data.frame(pep=rownames(exprs), gene=gene)
samps <- data.frame(
  obs=colnames(exprs), 
  grp=c(rep("ctl", nsamps), rep("trt", nsamps)),
  sex=rep(c("M", "F"), round(ncol(exprs) / 2))
)
state <- list(expression=exprs, features=feats, samples=samps)
rm(sim, exprs, gene, feats, samps)

## setup config and prep variables of interest for testing:
config <- list(
  obs_id_col="obs",
  sample_id_col="obs",
  feat_id_col="pep",
  gene_id_col="gene",
  frm=~grp+sex+grp:sex, 
  test_term="grp",
  sample_factors=list( 
    grp=c("ctl", "trt"), 
    sex=c("F", "M")
  )
)
out <- h0testr::initialize(state, config, minimal=TRUE)

## actual test:
result <- h0testr::test_msqrob(out$state, out$config)
head(result$hits)
}
