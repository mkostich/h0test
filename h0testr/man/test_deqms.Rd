% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test.R
\name{test_deqms}
\alias{test_deqms}
\title{Hypothesis testing using the \code{DEqMS} package}
\usage{
test_deqms(state, config, trend = FALSE)
}
\arguments{
\item{state}{List with elements like those returned by \code{read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Uses the following keys:
\tabular{ll}{
  \code{gene_id_col}    \cr \tab Name of column in \code{state$features} with unique gene/protein group ids. \cr
  \code{feat_col}       \cr \tab Name of column in \code{state$features} corresponding to \code{rownames(state$expression)}. \cr
  \code{obs_col}        \cr \tab Name of column in \code{state$samples} corresponding to \code{colnames(state$expression)}. \cr
  \code{frm}            \cr \tab Formula (formula) to be fit \cr
  \code{test_term}      \cr \tab Term (character) to be tested for non-zero coefficient. \cr
}}

\item{trend}{Logical scalar. Whether \code{limma::eBayes()} should use trended dispersion estimate.}
}
\value{
A data.frame with results of test. Columns include: 
    \code{c("logFC", "AveExpr", "t", "P.Value", "adj.P.Val", "B", "gene", "count", "sca.t", "sca.P.Value", "sca.adj.pval")}.
  Initial statistics from \code{limma}. Columns beginning with \code{sca.} 
    added by \code{DEqMS}.
}
\description{
Tests for differential expression using the 
    \code{DEqMS::spectraCounteBayes()} function.
}
\details{
The \code{DEqMS::spectraCounteBayes()} model is fit to \code{config$frm} 
    and a moderated t-test is performed for whether the effect of 
    \code{config$test_term} on \code{state$expression} is zero. 
  Returns gene-level hypothesis testing results based on 
    peptide/precursor-level input.
  Flow is:
    \tabular{l}{
      1. for each gene, count number of associated peptides. \cr
      2. Fit linear model to \code{config$frm} using \code{limma::lmFit()}. \cr
      3. Calculate statistics using \code{limma::eBayes()} on fitted model. \cr
      4. Append peptide counts to model returned by \code{limma::eBayes()}. \cr
      5. Adjust statistics using \code{DEqMS::spectraCounteBayes()}. \cr
      6. Generate hit table with \code{DEqMS::outputResult()}. \cr
    }
  See documentation for \code{h0testr::new_config()} 
    for more detailed description of configuration parameters.
}
\examples{
## lengthy setup of expression data:
set.seed(101)
nsamps <- 6
sim <- h0testr::sim2(
  n_samps1=nsamps, n_samps2=nsamps, n_genes=100, n_genes_signif=20, 
  fold_change=1, peps_per_gene=10, reps_per_sample=1, 
  p_drop=0.33, mnar_c0=-Inf, mnar_c1=0, mcar_p=0
)
exprs <- sim$mat
gene <- strsplit(rownames(exprs), "_")
gene <- sapply(gene, function(v) unlist(v)[1])
feats <- data.frame(pep=rownames(exprs), gene=gene)
samps <- data.frame(
  obs=colnames(exprs), 
  grp=c(rep("ctl", nsamps), rep("trt", nsamps)),
  sex=rep(c("M", "F"), round(ncol(exprs) / 2))
)
state <- list(expression=exprs, features=feats, samples=samps)
rm(sim, exprs, gene, feats, samps)

## setup config and prep variables of interest for testing:
config <- list(
  obs_id_col="obs",
  sample_id_col="obs",
  feat_id_col="pep",
  gene_id_col="gene",
  frm=~grp+sex+grp:sex, 
  test_term="grp",
  sample_factors=list( 
    grp=c("ctl", "trt"), 
    sex=c("F", "M")
  )
)
out <- h0testr::initialize(state, config, minimal=TRUE)

## actual test:
tbl <- h0testr::test_deqms(out$state, out$config)
head(tbl)
}
