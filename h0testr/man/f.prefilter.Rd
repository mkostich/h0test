% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/initialize.R
\name{f.prefilter}
\alias{f.prefilter}
\title{Prefilter data}
\usage{
f.prefilter(state, config, n_samples_min = 2, n_features_min = 2)
}
\arguments{
\item{state}{List with elements formatted like the list returned by \code{f.read_data()}:
\tabular{ll}{
  \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
  \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
  \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
}}

\item{config}{List with configuration values. Requires the following keys:
\tabular{ll}{
  \code{feat_id_col}  \cr \tab Name of column (character) in \code{feature_file_in} that corresponds to rows of \code{data_file_in}. \cr
  \code{obs_id_col}   \cr \tab Name of column (character) in \code{sample_file_in} that corresponds to columns of \code{expression}. \cr
}}

\item{n_samples_min}{minimum number of samples per feature; numeric >= 2.}

\item{n_features_min}{minimum number of features per sample; numeric >= 2.}
}
\value{
A list (the filtered state) with the following elements:
  \tabular{ll}{
    \code{expression} \cr \tab Numeric matrix with non-negative expression values. \cr
    \code{features}   \cr \tab A data.frame with feature meta-data for rows of expression. \cr
    \code{samples}    \cr \tab A data.frame with observation meta-data for columns of expression. \cr
  }
}
\description{
Adds filtering-related statistics to \code{state$features}, 
    and \code{state$samples}.
}
\details{
Wrapper for \code{f.samples_per_feature()}, \code{f.feature_median_expression()}, 
    \code{f.features_per_sample()}. Also reports quantiles of distributions. 
  See documentation for \code{h0testr::f.new_config()} 
    for more detailed description of configuration parameters.
}
\examples{
set.seed(101)
exprs <- h0testr::f.sim1(n_obs=6, n_feats=12, mcar_p=0.75)$mat
feats <- data.frame(feature_id=rownames(exprs))
samps <- data.frame(observation_id=colnames(exprs))
state <- list(expression=exprs, features=feats, samples=samps)
config <- list(feat_col="feature_id", obs_col="observation_id")
state2 <- h0testr::f.prefilter(state, config)
print(state2)
}
